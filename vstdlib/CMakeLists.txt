cmake_minimum_required(VERSION 3.16)
project(vstdlib_client)
set(SRCDIR "${CMAKE_SOURCE_DIR}")
set(CMAKE_MODULE_PATH ${SRCDIR}/cmake)
set(OUTBINNAME "vstdlib_client")
set(OUTBINDIR ${SRCDIR}/../game/bin)
set(NOSKELETONBASE "1")

include(${CMAKE_MODULE_PATH}/detect_platform.cmake)
include(${CMAKE_MODULE_PATH}/source_dll_base.cmake)

if(MSVC AND CMAKE_SIZEOF_VOID_P EQUAL 8) 
	ENABLE_LANGUAGE(ASM_MASM)
endif()

add_definitions(-DVSTDLIB_DLL_EXPORT)

if( LINUXALL )
    target_compile_options(${OUTBINNAME} PRIVATE -U_FORTIFY_SOURCE -fno-stack-protector -fpic -fno-semantic-interposition)
endif()

target_sources(${OUTBINNAME} PRIVATE "concommandhash.h")
if( NOT X360 )
    target_sources(${OUTBINNAME} PRIVATE "coroutine.cpp")
endif()
target_sources(${OUTBINNAME} PRIVATE "cvar.cpp")
target_sources(${OUTBINNAME} PRIVATE "jobthread.cpp")
target_sources(${OUTBINNAME} PRIVATE "keyvaluessystem.cpp")
if( WIN32 )
	target_sources(${OUTBINNAME} PRIVATE "processutils.cpp")
endif()
if(MSVC AND CMAKE_SIZEOF_VOID_P EQUAL 8)
    target_sources(${OUTBINNAME} PRIVATE "getstackptr64.asm")
	set_source_files_properties("getstackptr64.asm" PROPERTIES COMPILE_FLAGS "/D_M_X64")
endif()
target_sources(${OUTBINNAME} PRIVATE "random.cpp")
target_sources(${OUTBINNAME} PRIVATE "vcover.cpp")
target_sources(${OUTBINNAME} PRIVATE "eventsystem.cpp")
target_sources(${OUTBINNAME} PRIVATE "vstrtools.cpp")
target_sources(${OUTBINNAME} PRIVATE "vstdlib_strtools.cpp")
#target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/public/tier0/memoverride.cpp")