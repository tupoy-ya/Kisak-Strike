#//-----------------------------------------------------------------------------
#//	CLIENT_CSTRIKE15.VPC
#//
#//	Project Script
#//-----------------------------------------------------------------------------

#There are other projects in this folder, but this cmake is focused towards csgo a.k.a. cstrike15

cmake_minimum_required(VERSION 3.16)
project(Client_CSGO)
set(SRCDIR "${CMAKE_SOURCE_DIR}")
set(GAMENAME "hl2")
set(CSGO "1")
#set(DONT_DOWNGRADE_ABI "1")

#dont need to build this when building dedicated server
if( DEDICATED )
    return()
endif()

add_definitions(-DGAMEUI_EMBEDDED -DGAMEUI_EXPORTS -DVERSION_SAFE_STEAM_API_INTERFACES -DHL2_CLIENT_DLL)
if( USE_SCALEFORM )
    add_definitions(-DINCLUDE_SCALEFORM)
elseif( USE_ROCKETUI )
    add_definitions(-DINCLUDE_ROCKETUI)
    message("Using ROCKETUI")
endif()
add_definitions(-DALLOW_TEXT_MODE=1)

include( ./client_base.cmake )
# include( ./client_econ_base.cmake )

include_directories(${CMAKE_CURRENT_SOURCE_DIR})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/hl2)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/hl2/gameui)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/hl2/vgui)
include_directories(${SRCDIR}/game/shared/hl2)
include_directories(${SRCDIR}/game/shared)

#cstrike15 protos
TargetBuildAndAddProto( ${OUTBINNAME} ${SRCDIR}/game/shared/cstrike15/cstrike15_gcmessages.proto "${GENERATED_PROTO_DIR}")
TargetBuildAndAddProto( ${OUTBINNAME} ${SRCDIR}/game/shared/hl2/hl2_usermessages.proto "${GENERATED_PROTO_DIR}")
TargetBuildAndAddProto( ${OUTBINNAME} ${SRCDIR}/gcsdk/gcsdk_gcmessages.proto "${GENERATED_PROTO_DIR}")
TargetBuildAndAddProto( ${OUTBINNAME} ${SRCDIR}/gcsdk/gcsystemmsgs.proto "${GENERATED_PROTO_DIR}")

#force include
if( WIN32 OR POSIX )
    target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/public/tier0/platform.h")
endif()

#32bit time?


target_sources(${OUTBINNAME} PRIVATE "c_mod_lesson_stubs.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/game/shared/weapon_parse_default.cpp")

target_sources(${OUTBINNAME} PRIVATE "c_team_objectiveresource.cpp")
target_sources(${OUTBINNAME} PRIVATE "hud_voicestatus.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/game/shared/predicted_viewmodel.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/game/shared/hl2/player_pickup.cpp")
target_sources(${OUTBINNAME} PRIVATE "hltvreplaysystem.cpp")
target_sources(${OUTBINNAME} PRIVATE "steamworks_gamestats_client.cpp")

target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/public/XZip.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/public/XUnzip.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/tier1/fileio.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/utils/common/bsplib.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/public/filesystem_init.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/utils/common/filesystem_tools.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/utils/common/cmdlib.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/utils/common/scriplib.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/public/lumpfiles.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/public/zip_utils.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/common/platforminputdevice.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/common/imageutils.cpp")

if( POSIX )
    target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/filesystem/linux_support.cpp")
endif()

# target_sources(${OUTBINNAME} PRIVATE "hud_chat.cpp")
target_sources(${OUTBINNAME} PRIVATE "c_team_objectiveresource.cpp")
target_sources(${OUTBINNAME} PRIVATE "c_team_objectiveresource.h")

#$Folder	"HL2 DLL"
#{
    target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/game/shared/hl2/basehlcombatweapon_shared.cpp")
    target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/game/shared/hl2/achievements_hl2.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_antlion_dust.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_ar2_explosion.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_barnacle.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_barney.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_basehelicopter.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_basehelicopter.h")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_basehlcombatweapon.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_basehlcombatweapon.h")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_basehlplayer.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_basehlplayer.h")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_citadel_effects.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_corpse.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_corpse.h")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_env_alyxtemp.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_env_headcrabcanister.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_env_starfield.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_func_tankmortar.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_hl2_playerlocaldata.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_hl2_playerlocaldata.h")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_info_teleporter_countdown.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_npc_antlionguard.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_npc_combinegunship.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_npc_manhack.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_npc_rollermine.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_plasma_beam_node.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_prop_combine_ball.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_prop_combine_ball.h")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_rotorwash.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_script_intro.cpp")
    target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/game/shared/script_intro_shared.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_strider.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_te_concussiveexplosion.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_te_flare.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_thumper_dust.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_vehicle_airboat.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_vehicle_cannon.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_vehicle_crane.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_vehicle_crane.h")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_vehicle_prisoner_pod.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_weapon__stubs_hl2.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_weapon_crossbow.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_weapon_physcannon.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/c_weapon_stunstick.cpp")
    target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/game/shared/hl2/citadel_effects_shared.h")
    target_sources(${OUTBINNAME} PRIVATE "hl2/clientmode_hlnormal.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/clientmode_hlnormal.h")
    target_sources(${OUTBINNAME} PRIVATE "death.cpp")
    target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/game/shared/hl2/env_headcrabcanister_shared.cpp")
    target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/game/shared/hl2/env_headcrabcanister_shared.h")
    target_sources(${OUTBINNAME} PRIVATE "hl2/fx_antlion.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/fx_bugbait.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/fx_hl2_impacts.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/fx_hl2_tracers.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/hl2_clientmode.cpp")
    target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/game/shared/hl2/hl2_gamerules.cpp")
    target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/game/shared/hl2/hl2_gamerules.h")
    target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/game/shared/hl2/hl2_shareddefs.h")
    target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/game/shared/hl2/hl_gamemovement.cpp")
    target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/game/shared/hl2/hl_gamemovement.h")
    target_sources(${OUTBINNAME} PRIVATE "hl2/hl_in_main.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/hl_prediction.cpp")
    #target_sources(${OUTBINNAME} PRIVATE "hl2/hud_ammo.cpp")
    #target_sources(${OUTBINNAME} PRIVATE "hl2/hud_battery.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/hud_blood.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/hud_credits.cpp")
    # target_sources(${OUTBINNAME} PRIVATE "hl2/hud_damageindicator.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/hud_flashlight.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/hud_health.cpp")
    # target_sources(${OUTBINNAME} PRIVATE "hl2/hud_poisondamageindicator.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hud_posture.cpp")
    # target_sources(${OUTBINNAME} PRIVATE "hl2/hud_quickinfo.cpp")
    # target_sources(${OUTBINNAME} PRIVATE "hud_squadstatus.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/hud_suitpower.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/hud_suitpower.h")
    target_sources(${OUTBINNAME} PRIVATE "hl2/hud_weaponselection.cpp")
    # target_sources(${OUTBINNAME} PRIVATE "hl2/hud_zoom.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/shieldproxy.cpp")
    target_sources(${OUTBINNAME} PRIVATE "hl2/vgui_rootpanel_hl2.cpp")

    target_sources(${OUTBINNAME} PRIVATE "episodic/c_vort_charge_token.cpp")



#$Folder "GameUI - Embedded"
#{
    #$Folder "Base GameUI"
    #{
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/backgroundmenubutton.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/basesavegamedialog.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/bitmapimagepanel.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/commandcheckbutton.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/contentcontroldialog.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/createmultiplayergamebotpage.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/createmultiplayergamedialog.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/createmultiplayergamegameplaypage.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/createmultiplayergameserverpage.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/customtabexplanationdialog.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/cvarnegatecheckbutton.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/cvarslider.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/cvartextentry.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/cvartogglecheckbutton.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/gameconsole.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/gameconsoledialog.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/gameui_interface.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/gameui_util.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/keytogglecheckbutton.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/labeledcommandcombobox.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/loadingtippanel.cpp")
        if( NOT POSIX )
            target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/logofile.cpp")
        endif()
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/modinfo.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/mousemessageforwardingpanel.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/multiplayeradvanceddialog.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/optionsdialog.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/optionssubaudio.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/optionssubdifficulty.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/optionssubgame.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/optionssubkeyboard.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/optionssubmouse.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/optionssubmultiplayer.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/optionssubportal.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/optionssubvideo.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/optionssubvoice.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/panellistpanel.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/playerlistdialog.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/rungameengine.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/scriptobject.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/textentrybox.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/urlbutton.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/vcontrolslistpanel.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/uigamedata.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/uigamedata_storage.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/uiavatarimage.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/vguisystemmoduleloader.cpp")
        target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/ironsight_editor.cpp")
        #}
    
        #$Folder "External Stuff"
        #{
            target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/common/language.cpp")
        #}
    
        #$Folder "CSGO GameUI"
        #{
            target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/BasePanel.cpp")
            target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/hl2/hl2basepanel.cpp")
            target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/tracker/common/msgbuffer.cpp")
            target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/common/GameUI/ObjectList.cpp")
            target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/bonusmapsdatabase.cpp")
            target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/savegamebrowserdialog.cpp")
        #}
    
        #$Folder	"Dialogs"
        #{
            target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/benchmarkdialog.cpp")
            target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/bonusmapsdialog.cpp")
            target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/commentarydialog.cpp")
            target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/commentaryexplanationdialog.cpp")
            target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/loadgamedialog_xbox.cpp")
            target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/loadgamedialog.cpp")
            target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/newgamedialog.cpp")
            target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/savegamedialog_xbox.cpp")
            target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/savegamedialog.cpp")
            target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/loadcommentarydialog.cpp")
            target_sources(${OUTBINNAME} PRIVATE "hl2/gameui/changegamedialog.cpp")
        #}
    #}

if( USE_ROCKETUI )
    target_sources(${OUTBINNAME} PRIVATE "cstrike15/RocketUI/rkmenu_main.cpp")
    target_sources(${OUTBINNAME} PRIVATE "cstrike15/RocketUI/rkhud_chat.cpp")
    target_sources(${OUTBINNAME} PRIVATE "cstrike15/RocketUI/rkhud_pausemenu.cpp")
    target_sources(${OUTBINNAME} PRIVATE "cstrike15/RocketUI/rkhud_teammenu.cpp")
    target_sources(${OUTBINNAME} PRIVATE "cstrike15/RocketUI/rkhud_loadingscreen.cpp")
    target_sources(${OUTBINNAME} PRIVATE "cstrike15/RocketUI/rkhud_infobar.cpp")
    target_sources(${OUTBINNAME} PRIVATE "cstrike15/RocketUI/rkhud_scoreboard.cpp")
    target_sources(${OUTBINNAME} PRIVATE "cstrike15/RocketUI/rkhud_roundtimer.cpp")
    target_sources(${OUTBINNAME} PRIVATE "cstrike15/RocketUI/rkhud_killfeed.cpp")
    target_sources(${OUTBINNAME} PRIVATE "cstrike15/RocketUI/rkhud_buymenu.cpp")
    target_sources(${OUTBINNAME} PRIVATE "cstrike15/RocketUI/rkhud_radar.cpp")
    target_sources(${OUTBINNAME} PRIVATE "cstrike15/RocketUI/rkpanel_options.cpp")
    target_sources(${OUTBINNAME} PRIVATE "cstrike15/RocketUI/rkpanel_popup.cpp")
endif()

target_sources(${OUTBINNAME} PRIVATE "hl2/c_hlrootpanel.cpp")

target_link_libraries(${OUTBINNAME} meshutils_client)
if( WIN32 OR POSIX )
    target_link_libraries(${OUTBINNAME} jpeglib_client)
    target_link_libraries(${OUTBINNAME} vpklib_client)
endif()
if( USE_ROCKETUI )
    #target_link_libraries(${OUTBINNAME} ${SRCDIR}/thirdparty/RmlUi/build/libRmlCore.so)
    target_link_libraries(${OUTBINNAME} RmlCore)
endif()
target_link_libraries(${OUTBINNAME} matsys_controls_client)
target_link_libraries(${OUTBINNAME} kisak_gcsdk_client)
target_link_libraries(${OUTBINNAME} dmxloader_client tier1_client tier2_client tier3_client vgui_controls_client vtf_client bzip2_client vstdlib_client bitmap_client mathlib_client )
